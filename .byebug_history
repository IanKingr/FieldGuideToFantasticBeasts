c
(8.8123123).round(2)
(8.8).round(2)
(8.8).round
ROUND(8.8)
round(8.8)
Math.round(@averages[beast.id])
@averages[beast.id]
c
@beasts.joins(:reviews).group("beasts.id").average("reviews.rating")
Beast.joins(:reviews).group("beasts.id").average("reviews.rating")
Beast.joins(:reviews).group("beasts.id").average("reviews.rating”)
c
asd
c
like_params[:beast_id].to_i
like_params
c
like_params[:beast_id].to_i
like_params[:beast_id]
like_params
c
json.reviews
json.reviews do json.array! @reviews do |review| json.username review.user.username end end
c
x
Review.where("beast_id = ?", params[:data][:beast_id].to_i)
params[:data][:beast_id].to_i
c
n
c
quit
json.extract! @reviews do |review| json.username review.user.username end
json.array! @reviews do |review| json.username review.user.username end
json.array! @reviews do |review|
@reviews.user
@reviews
c
@beasts
n
Beast.where("affinity_id = ?", params[:data][:affinity_id].to_i)
params
c
params
cparams
c
Beast.where("affinity_id = ?", params[:data][:affinity_id].to_i)
Beast.where(params[:data])
Beast.find_by(params[:data])
params[:data][:affinity_id].to_i
params[:data][:affinity_id].to_int
params[:data][:affinity_id]
params[:affinity_id]
params[:data][:affinity_id]
JSON.parse(params)
params[:data][:affinity_id]
params[:data]
params[:affinity_id]
params
c
@beast.errors.full_messages
@beast.errors
c
@user
c
n
@beast
c
n
s
params[:author_id]
params.permit(:author_id)
params
c
@user
c
@user
c
@user
c
@user
user
c
@user
c
      password: params[:password])
      username: params[:username],
User.new(
User.new(params)
params[:username]
params
user_params
c
n
